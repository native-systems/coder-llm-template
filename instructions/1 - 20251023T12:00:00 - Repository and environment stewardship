Authors: Jonathan Tran, OpenAI GPT-5

1. Repository and environment stewardship

1.1. Directory baseline
1.1.1. Maintain the root folders `architecture/`, `instructions/`, `progress/`, `implementation/`, and `tools/`; create any that are missing before other work begins.
1.1.2. When `architecture/` is created, also create `architecture/HISTORY` as an empty file if no entries exist so future decisions can append records immediately.

1.2. Git verification
1.2.1. Before modifying or creating files, run `git rev-parse --is-inside-work-tree` to confirm repository status.
1.2.2. If the check fails, run `git init` at the repository root, then rerun the verification to confirm success.
1.2.3. Record any repository initialization in the active task log whenever implementation work is in progress to maintain traceability.
1.2.4. You may encapsulate these checks in a helper under `tools/`; document the helper in `tools/INDEX` once created.

1.3. Instruction awareness
1.3.1. Read every instruction file before acting, and reread when new instructions appear to ensure alignment with the latest guidance.

1.4. Author identity
1.4.1. Maintain a text file named `.me` at the repository root containing a single line with the authoritative user name.
1.4.2. Read the `.me` file before drafting instruction or architecture documents and use the recorded name as the user author in the `Authors:` field.
1.4.3. Update the `.me` file if the user provides a new preferred name, and cascade the change by revising subsequent documents that list the user as an author.

1.5. Repository ignore policy
1.5.1. Maintain a `.gitignore` file at the repository root that blocks standard transient artefacts produced by Python services, Node tooling, container builds, and local development.
1.5.2. Exclude Python bytecode, virtual environments, coverage artefacts, and build directories (for example `__pycache__/`, `*.py[cod]`, `.venv/`, `dist/`, `build/`).
1.5.3. Exclude Node-specific transient files such as `node_modules/`, `npm-debug.log*`, `yarn-error.log`, `coverage/`, and compiled asset directories.
1.5.4. Exclude local environment and secret files, including `.env`, `.env.*`, `.DS_Store`, IDE project settings (such as `.idea/`, `.vscode/`), and container state directories.
1.5.5. Exclude the `.me` author identity file so the user name remains untracked while still present locally for reference.
1.5.6. Whitelist `progress/*.log` so task logs are staged even when general ignore patterns would otherwise skip them.
1.5.7. Review and extend the `.gitignore` entries when new build or tooling systems are introduced to prevent transient artefacts from entering version control.

1.6. Agent manifest availability
1.6.1. When performing the repository initialization checks from section 1.2, also confirm `AGENTS.md` exists at the repository root.
1.6.2. If `AGENTS.md` is missing, create it immediately with guidance that every worker must read all files under `instructions/` before acting.
1.6.3. Keep `AGENTS.md` up to date when onboarding requirements evolve so new workers receive current entry expectations.

1.7. Local system briefing
1.7.1. Read the `.local-system` file at the repository root before running any shell command to understand environment limitations.
1.7.2. Create `.local-system` if it does not exist and document environment constraints and unavailable tooling as they are discovered.
1.7.3. Append new findings whenever commands fail due to missing binaries, incompatible flags, or other host-specific quirks so future workers avoid repeat issues.

1.8. Local metadata hygiene
1.8.1. Ensure `.local-system` remains ignored by Git alongside `.me` and other local-only artefacts.

Derived from
1. instructions/1 - 20251022T02:15:00 - Repository and environment stewardship
