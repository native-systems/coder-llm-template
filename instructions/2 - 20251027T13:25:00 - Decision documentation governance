Authors: Jonathan Tran, OpenAI GPT-5

INST-2. Decision documentation governance

INST-2.1. Decision placement and immutability
INST-2.1.1. Document instruction-level guidance in `instructions/` and architecture guidance in `architecture/`, grouping related decisions when practical.
INST-2.1.2. Create new decision files for new topics instead of editing existing ones unless the user explicitly authorises an update.

INST-2.2. Decision file construction
INST-2.2.1. Name each decision file using the pattern `<N> - <DATETIME> - <SUBJECT>` where `<N>` matches the leading heading inside the file.
INST-2.2.2. Begin every file with `Authors:` followed by all contributors, including the user when content is user-authored, user-requested, or derived from their earlier instructions.
INST-2.2.3. Structure content with numbered sections and subsections (for example `INST-2.3.1.`) instead of unordered bullets to keep references stable.
INST-2.2.4. Assign unique subsection identifiers to every decision item so they can be cited precisely within other documents and code comments.

INST-2.3. Section prefix conventions
INST-2.3.1. Prefix every numbered section and subsection in top-level architecture decision files with `ARCH-<N>.` so all headings within `architecture/<N> - ...` begin with the matching identifier (for example, `ARCH-1.1.`, `ARCH-1.4.2.`).
INST-2.3.2. When authoring new architecture decision documents, ensure every section you introduce uses the `ARCH-<N>.` prefix; do not retrofit previously published architecture files.
INST-2.3.3. Prefix every numbered section and subsection in instruction files with `INST-<N>.` so all headings within `instructions/<N> - ...` appear as `INST-<N>.x`.
INST-2.3.4. Apply the `INST-<N>.` prefix to every section in newly authored instruction files; leave previously published instruction documents unchanged.
INST-2.3.5. When instruction content must evolve, create a new instruction document that supersedes the old one, retaining the `INST-<N>.` prefix and cross-referencing the retired guidance instead of editing the original file.

INST-2.4. History maintenance and commits
INST-2.4.1. Append a one-line summary for each new or updated decision file to the appropriate `HISTORY` file (`instructions/HISTORY` or `architecture/HISTORY`) immediately after authoring the decision.
INST-2.4.2. Stage only the decision file and its HISTORY entry when committing so unrelated changes do not join the history.
INST-2.4.3. Begin instruction decision commit messages with `INST-` followed by a concise descriptor (for example `INST-Decision Governance`) because instruction work is managed outside the task ledger.
INST-2.4.4. Begin architecture decision commit messages with `ARCH-` followed by a concise descriptor that identifies the decision being recorded.
INST-2.4.5. When another instruction mandates a specific commit message, execute `git commit` with that exact message and include only the referenced files.

INST-2.5. Instruction recompilation protocol
INST-2.5.1. When regrouping or recompiling instructions, preserve all mandatory language from the sources; escalate conflicts instead of weakening requirements.
INST-2.5.2. At the end of every recompiled file, include a numbered “Derived from” section listing all source instructions and clarifying the transformation when content is merged or expanded.
INST-2.5.3. Clarify ambiguities immediately by methodically scanning every relevant instruction for conflicting requirements, inconsistent wording, unclear scope, or misleading implications; document any uncertainty you cannot resolve, halt publication, and request explicit user guidance before proceeding so that even less experienced readers can follow the reconciled result with confidence.
INST-2.5.4. Publish recompiled instruction sets across logically grouped files so related guidance remains discoverable and maintainable.

INST-2.6. Instruction proposals
INST-2.6.1. Document reusable ideas as proposals in `instruction-proposals/`, applying the same naming convention but listing only the proposer as the author.
INST-2.6.2. Do not enforce or commit proposals until the user explicitly approves them.
INST-2.6.3. After approval, migrate the accepted content into the canonical decision directories, update the relevant `HISTORY`, and commit following section INST-2.4.
INST-2.6.4. Leave rejected proposals in place unless the user instructs their removal.

Derived from
1. instructions/2 - 20251023T12:05:00 - Decision governance and instruction compilation
2. instructions/7 - 20251027T11:41:28 - Decision section prefix conventions
3. User request on 2025-10-27 to regroup instructions with INST-prefixed sections and clarify instruction commit formatting
